services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: deer-flow-backend
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://backend:8000
      - PORT=8000
      - SEARCH_API=${SEARCH_API:-brave_search}
      - RAG_PROVIDER=${RAG_PROVIDER:-ragflow}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - BRAVE_SEARCH_API_KEY=${BRAVE_SEARCH_API_KEY}
      - RAGFLOW_API_KEY=${RAGFLOW_API_KEY}
      - RAGFLOW_BASE_URL=${RAGFLOW_BASE_URL}
    expose:
      - "8000"
    command: >
      sh -c "
        echo 'Installing UV package manager (recommended by DeerFlow)...' &&
        pip install --no-cache-dir uv &&
        echo 'Installing core project dependencies from pyproject.toml...' &&
        uv sync &&
        echo 'Installing additional visual and automation dependencies...' &&
        uv add matplotlib seaborn plotly pillow beautifulsoup4 selenium webdriver-manager mermaid-py diagrams graphviz python-pptx openpyxl xlsxwriter &&
        echo 'All dependencies installed for advanced research & automation!' &&
        echo 'Starting DeerFlow server with UV environment...' &&
        uv run python -m uvicorn src.server.app:app --host 0.0.0.0 --port 8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/rag/config"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    env_file:
      - .env
    volumes:
      - ./conf.yaml:/app/conf.yaml:ro
      - deer_flow_data:/app/data
    restart: unless-stopped
    networks:
      - coolify

  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile.frontend
      args:
        - NEXT_PUBLIC_API_URL=https://deer-flow-api.cyberteam.click/api
    container_name: deer-flow-frontend
    environment:
      - NODE_ENV=production
    env_file:
      - .env
    expose:
      - "3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - coolify

volumes:
  deer_flow_data:
    driver: local

networks:
  coolify:
    external: true
