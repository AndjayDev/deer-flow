services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: deer-flow-backend
    environment:
      # === CORE SYSTEM CONFIGURATION ===
      - NODE_ENV=production
      - PORT=8000
      - BACKEND_URL=${BACKEND_URL}
      - API_BASE_URL=${API_BASE_URL}

      # === VERTEX AI AUTHENTICATION (EXACT VALUES FROM .ENV) ===
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/google-vertex-ai-key.json
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION}
      
      # === GEMINI MODEL SELECTIONS (CORRECTED FROM RESEARCH) ===
      - GEMINI_BASIC_MODEL=${GEMINI_BASIC_MODEL}
      - GEMINI_REASONING_MODEL=${GEMINI_REASONING_MODEL}
      - GEMINI_VISION_MODEL=${GEMINI_VISION_MODEL}
      
      # === PROVIDER ROUTING (FROM .ENV) ===
      - DEFAULT_LLM_PROVIDER=${DEFAULT_LLM_PROVIDER}
      - PRIMARY_LLM_PROVIDER=${PRIMARY_LLM_PROVIDER}
      - REASONING_LLM_PROVIDER=${REASONING_LLM_PROVIDER}
      - VISION_LLM_PROVIDER=${VISION_LLM_PROVIDER}
      
      # === ADVANCED MODALITIES (FROM .ENV) ===
      - TTS_PROVIDER=${TTS_PROVIDER}
      - GEMINI_TTS_MODEL=${GEMINI_TTS_MODEL}
      - TTS_VOICE_TYPE=${TTS_VOICE_TYPE}
      - TTS_LANGUAGE=${TTS_LANGUAGE}
      - IMAGE_GENERATION_PROVIDER=${IMAGE_GENERATION_PROVIDER}
      - VERTEX_IMAGE_MODEL=${VERTEX_IMAGE_MODEL}
      - IMAGE_RESOLUTION=${IMAGE_RESOLUTION}
      - IMAGE_STYLE=${IMAGE_STYLE}
      - VIDEO_GENERATION_PROVIDER=${VIDEO_GENERATION_PROVIDER}
      - VIDEO_GENERATION_MODEL=${VIDEO_GENERATION_MODEL}
      - AUDIO_ANALYSIS_PROVIDER=${AUDIO_ANALYSIS_PROVIDER}
      - AUDIO_ANALYSIS_MODEL=${AUDIO_ANALYSIS_MODEL}

      # === SEARCH & RESEARCH APIS (FROM .ENV) ===
      - SEARCH_API=${SEARCH_API}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - BRAVE_SEARCH_API_KEY=${BRAVE_SEARCH_API_KEY}
      
      # === RAG & KNOWLEDGE BASE (FROM .ENV) ===
      - RAG_PROVIDER=${RAG_PROVIDER}
      - RAGFLOW_API_KEY=${RAGFLOW_API_KEY}
      - RAGFLOW_API_URL=${RAGFLOW_API_URL}
      - RAGFLOW_BASE_URL=${RAGFLOW_BASE_URL}
      
      # === LANGFUSE OBSERVABILITY (SELF-HOSTED) ===
      - LANGFUSE_TRACING=${LANGFUSE_TRACING}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - LANGFUSE_HOST=${LANGFUSE_HOST}
      
      # === USER AUTHENTICATION (OAUTH) ===
      - GOOGLE_OAUTH_CLIENT_ID=${GOOGLE_OAUTH_CLIENT_ID}
      - GOOGLE_OAUTH_CLIENT_SECRET=${GOOGLE_OAUTH_CLIENT_SECRET}
      - GOOGLE_OAUTH_REDIRECT_URI=${GOOGLE_OAUTH_REDIRECT_URI}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      
      # === FALLBACK LLM PROVIDERS (FROM .ENV) ===
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DASHSCOPE_API_KEY=${DASHSCOPE_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      
      # === PERFORMANCE TUNING (FROM .ENV) ===
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT}
      - RETRY_ATTEMPTS=${RETRY_ATTEMPTS}

    env_file:
      - .env
    expose:
      - "8000"
    labels:
      # Core Traefik Configuration
      - 'traefik.enable=true'
      - 'traefik.docker.network=coolify'
      
      # API HTTPS Routing
      - 'traefik.http.routers.deer-api-https.entryPoints=https'
      - 'traefik.http.routers.deer-api-https.rule=Host(`deer-flow.cyberteam.click`) && PathPrefix(`/api`)'
      - 'traefik.http.routers.deer-api-https.service=deer-api-service'
      - 'traefik.http.routers.deer-api-https.tls=true'
      - 'traefik.http.routers.deer-api-https.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.deer-api-https.priority=200'
      - 'traefik.http.services.deer-api-service.loadbalancer.server.port=8000'
      
      # HTTP to HTTPS Redirect
      - 'traefik.http.routers.deer-api-http.entryPoints=http'
      - 'traefik.http.routers.deer-api-http.rule=Host(`deer-flow.cyberteam.click`) && PathPrefix(`/api`)'
      - 'traefik.http.routers.deer-api-http.middlewares=redirect-to-https'
      - 'traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https'
      
    command: >
      sh -c "
        echo 'ü¶å DeerFlow Backend Starting - Production Mode' &&
        echo 'üîë Vertex AI Project: ${GOOGLE_CLOUD_PROJECT}' &&
        echo 'üìç Vertex AI Location: ${VERTEX_AI_LOCATION}' &&
        echo 'üß† Basic Model: ${GEMINI_BASIC_MODEL}' &&
        echo 'üß† Reasoning Model: ${GEMINI_REASONING_MODEL}' &&
        echo 'üëÅÔ∏è Vision Model: ${GEMINI_VISION_MODEL}' &&
        echo 'ü¶å Installing UV package manager...' &&
        pip install --no-cache-dir uv &&
        echo 'ü¶å Installing core dependencies from pyproject.toml...' &&
        uv sync &&
        echo '‚úÖ Forcing installation of Pydantic to fix module error...' &&
        uv add pydantic pydantic-settings &&
        echo 'ü¶å Installing research dependencies...' &&
        uv add matplotlib seaborn plotly pillow beautifulsoup4 selenium webdriver-manager mermaid-py diagrams graphviz python-pptx openpyxl xlsxwriter &&
        echo 'ü¶å Installing Google Cloud dependencies for Vertex AI...' &&
        uv add google-cloud-aiplatform google-auth google-auth-oauthlib google-auth-httplib2 google-cloud-texttospeech google-cloud-speech &&
        echo 'ü¶å Installing Langfuse observability...' &&
        uv add langfuse &&
        echo 'ü¶å Verifying Vertex AI credentials...' &&
        python -c 'import os; print(f\"GOOGLE_APPLICATION_CREDENTIALS: {os.environ.get(\"GOOGLE_APPLICATION_CREDENTIALS\", \"NOT SET\")}\")'  &&
        python -c 'import os; print(f\"GOOGLE_CLOUD_PROJECT: {os.environ.get(\"GOOGLE_CLOUD_PROJECT\", \"NOT SET\")}\")'  &&
        echo 'ü¶å Testing credential file access...' &&
        python -c 'import os; print(f\"Credential file exists: {os.path.exists(\"/app/google-vertex-ai-key.json\")}\")'  &&
        echo 'ü¶å Starting DeerFlow Backend Server on port 8000...' &&
        uv run python -m uvicorn src.server.app:app --host 0.0.0.0 --port 8000 --log-level debug --workers 1
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/rag/config"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    volumes:
      - ./conf.yaml:/app/conf.yaml:ro
      - ./google-vertex-ai-key.json:/app/google-vertex-ai-key.json:ro
      - deer_flow_data:/app/data
    restart: unless-stopped
    networks:
      - deer-flow-network
      - coolify

# docker-compose.production.yml, frontend docker service block

  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile.frontend
      args:
        # üîß FIXED: Both frontend build args and runtime env use path-based routing
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - API_URL=${API_URL}
    container_name: deer-flow-frontend
    environment:
      - NODE_ENV=production
      # üîß FIXED: Runtime environment variables also use path-based routing
      - NODE_ENV=production
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - GOOGLE_OAUTH_CLIENT_ID=${GOOGLE_OAUTH_CLIENT_ID}
      - GOOGLE_OAUTH_CLIENT_SECRET=${GOOGLE_OAUTH_CLIENT_SECRET}
    env_file:
      - .env
    expose:
      - "3000"
    ports:
      - "3000:3000"
    labels:
      # Core Traefik Configuration
      - 'traefik.enable=true'
      - 'traefik.docker.network=coolify'
      
      # Frontend HTTPS Routing
      - 'traefik.http.routers.deer-frontend-https.entryPoints=https'
      - 'traefik.http.routers.deer-frontend-https.rule=Host(`deer-flow.cyberteam.click`)'
      - 'traefik.http.routers.deer-frontend-https.service=deer-frontend-service'
      - 'traefik.http.routers.deer-frontend-https.tls=true'
      - 'traefik.http.routers.deer-frontend-https.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.deer-frontend-https.priority=50'
      - 'traefik.http.services.deer-frontend-service.loadbalancer.server.port=3000'
      
      # HTTP to HTTPS Redirect
      - 'traefik.http.routers.deer-frontend-http.entryPoints=http'
      - 'traefik.http.routers.deer-frontend-http.rule=Host(`deer-flow.cyberteam.click`)'
      - 'traefik.http.routers.deer-frontend-http.middlewares=redirect-to-https'
      # --- START OF FIX for CSP ---
      # 1. Define the CSP middleware. Using the exact syntax you provided that works.
      # üîß TEMPORARY: CSP disabled for testing (re-enable after confirming functionality)
      # - "traefik.http.middlewares.frontend-csp.headers.customresponseheaders.Content-Security-Policy=default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; script-src-elem 'self' 'unsafe-inline'; script-src-attr 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; font-src 'self' data:; img-src 'self' data: https:; connect-src 'self' https:; object-src 'none'; base-uri 'self';"
      - 'traefik.http.routers.deer-frontend-https.middlewares='
      - 'traefik.http.routers.deer-frontend-https.middlewares='
      
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - deer-flow-network
      - coolify
volumes:
  deer_flow_data:
    driver: local

networks:
  deer-flow-network:
    driver: bridge
  coolify:
    external: true
