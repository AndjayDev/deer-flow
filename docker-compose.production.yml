services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: deer-flow-backend
    environment:
      - NODE_ENV=production
      - PORT=8000
      - BACKEND_URL=https://api.deer-flow.cyberteam.click
      - API_BASE_URL=https://api.deer-flow.cyberteam.click
      - SEARCH_API=${SEARCH_API:-tavily}
      - RAG_PROVIDER=${RAG_PROVIDER:-ragflow}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - BRAVE_SEARCH_API_KEY=${BRAVE_SEARCH_API_KEY}
      - RAGFLOW_API_KEY=${RAGFLOW_API_KEY}
      - RAGFLOW_BASE_URL=${RAGFLOW_BASE_URL}
      - LANGSMITH_TRACING=${LANGSMITH_TRACING:-false}
      - LANGSMITH_ENDPOINT=${LANGSMITH_ENDPOINT}
      - LANGSMITH_PROJECT=${LANGSMITH_PROJECT}
    env_file:
      - .env
    expose:
      - "8000"
    labels:
# BACKEND LABELS - Add to your docker-compose.production.yml
# Using EXACT Coolify/Traefik syntax (no quotes unless complex rules)

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: deer-flow-backend
    environment:
      # Your environment variables here
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=coolify"
      
      # ðŸŽ¯ PRIMARY: Subdomain routing (for future)
      - "traefik.http.routers.deer-backend-subdomain.rule=Host(`api.deer-flow.cyberteam.click`)"
      - "traefik.http.routers.deer-backend-subdomain.entrypoints=websecure"
      - "traefik.http.routers.deer-backend-subdomain.tls=true"
      - "traefik.http.routers.deer-backend-subdomain.priority=200"
      - "traefik.http.routers.deer-backend-subdomain.service=deer-backend"
      
      # ðŸš¨ TEMPORARY: Path-based routing (for current frontend)
      - "traefik.http.routers.deer-backend-path.rule=Host(`deer-flow.cyberteam.click`) && PathPrefix(`/api`)"
      - "traefik.http.routers.deer-backend-path.entrypoints=websecure"
      - "traefik.http.routers.deer-backend-path.tls=true"
      - "traefik.http.routers.deer-backend-path.priority=100"
      - "traefik.http.routers.deer-backend-path.service=deer-backend"
      
      # ðŸ“¡ SERVICE: Backend service definition
      - "traefik.http.services.deer-backend.loadbalancer.server.port=8000"
      

    command: >
      sh -c "
        echo 'ðŸ¦Œ Installing UV package manager...' &&
        pip install --no-cache-dir uv &&
        echo 'ðŸ¦Œ Installing core dependencies from pyproject.toml...' &&
        uv sync &&
        echo 'ðŸ¦Œ Installing additional research dependencies...' &&
        uv add matplotlib seaborn plotly pillow beautifulsoup4 selenium webdriver-manager mermaid-py diagrams graphviz python-pptx openpyxl xlsxwriter &&
        echo 'ðŸ¦Œ Starting DeerFlow Backend Server on port 8000...' &&
        uv run python -m uvicorn src.server.app:app --host 0.0.0.0 --port 8000 --log-level info
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/rag/config"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    volumes:
      - ./conf.yaml:/app/conf.yaml:ro
      - deer_flow_data:/app/data
    restart: unless-stopped
    networks:
      - deer-flow-network
      - coolify

  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile.frontend
      args:
        - NEXT_PUBLIC_API_URL=https://deer-flow.cyberteam.click/api
        - API_URL=https://deer-flow.cyberteam.click/api
    container_name: deer-flow-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://deer-flow.cyberteam.click/api
      - API_URL=https://deer-flow.cyberteam.click/api
    env_file:
      - .env
    expose:
      - "3000"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=coolify"
      - "traefik.http.routers.deer-frontend.rule=Host(`deer-flow.cyberteam.click`)"
      - "traefik.http.routers.deer-frontend.entrypoints=websecure"
      - "traefik.http.routers.deer-frontend.tls=true"
      - "traefik.http.routers.deer-frontend.service=deer-frontend"
      - "traefik.http.services.deer-frontend.loadbalancer.server.port=3000"
      
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - deer-flow-network
      - coolify

volumes:
  deer_flow_data:
    driver: local

networks:
  deer-flow-network:
    driver: bridge
  coolify:
    external: true
